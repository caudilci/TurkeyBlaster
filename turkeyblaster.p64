picotron cartridge // www.picotron.net
version 2

:: gfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA3LTA2IDIxOjU3OjAzIixtb2RpZmllZD0iMjAyNS0w
Ny0yMCAxNjo0Mzo1NiIscmV2aXNpb249MTE5NV1dbHo0AHIFAAC1OAAA8yF7WzBdPXtibXA9cHh1
AEMgEBAE8FYHEAfAF9AXwAcQB-BWLGZsYWdzPTAscGFuX3gIAMp5PTAsem9vbT02fSw_APBEICgA
KHAJDx0PIA8dCJAJDxkvHQ0gHxRQDxgfHQ0wBC8UMAgPHR0QHxQULhAPGAgtAD4ULgAIPV4ELgAd
Dh0OJC4EDhAODQ4NDkQuBA4ATiQeBB4IAP8OFC4ELiBOBC4EDlBONJAJEAmwCRAJkBkPGRAMGTCj
AByiYAgACAAokAgACKcA8S0JUB8UIA0vHQ8ZCSAvFAQwDR8dDxggLxQUHhAdDx0IEC4UPgAtCA8Y
AC4EXj0IEA4ELiQOHQ4dAA4ELkSrAPIJAA4EHgQeJE4QLgQuFE4wDgQuBE5QNE6ApwB-DxkZcBkM
cKUAHV8YECigGKEATwFEAV8J4AwZIKEAHC-w8DEAsP8BaHWADyAFTnAOBQ7ABQ7wRkAAHeM2N8AX
oAdQB3AXABcAFwYAnwdQB6AXwDfwNk4AHe9DKrBagIpgeoBKsBrwSy4BHg8xAOD-Bv8bDRyuDxoO
DAoMvg0czh3_AA3_knUAHg8xAP9E-yYYAdAHAQ8QsBcBHpAXAQ4BHnAXAS4BHlAhPgchUB4BHgcB
HnAeAQcBHpAeAR6wDgEO0AHwJ5YAHg8xAP9EwgY-GZAuCQ4JHmAOCQIAQh5QDgQLAP9HBA5QDyEO
VA4NQB0PD14MHTANLA8gHAssDUANfA1ABA4NXA0OBCAELl0uBAANDA4UXgQODA0ADQwNFF4EHA0A
HRAELx8EGg4dUAQqBBoPFHAILxUEF0CiABwfUKEAESBQDaEAKA1AoQDxBGANXA1QBB5dHgQgBL4E
EA0MDgShAEAQDRwEoAA3IB0OnwC-BHAPFC8VBBgPFDBDAWQCogARFEMB-w4cBF4UDQwNEB0OHx8E
KgQQHTAPFBoEKgSAHxUEKKMAIB-w2wL1ER4IAPELLlAfH14dUJ1ADyEPD30MDyFAC30LQAQOew4s
AiMAC80CUAsACwwLzQKwCwAbEAQtBB0OG1AHAEAPFHAKLQIPzAIxD5IACFJge1AEnr4CEwu_AjEL
EAu_AkYLIBsOkAADvQIeGr0CDyUBRyMQC68CIAsAkwDwARQLDAsQGw4dBC0EEBswDxQJAACuAh8q
rgL-HyFwHn8BMg5APggAUAkOML5QhAFlDyAvDz8fCwABCAAgIQ8RAPEGXw8PIWAEfVAEDgROBA4E
QA0PDwReCQCADl8fDg8PDVAIAP8BDWAOLA8UHAtgCy8VGyoLML0CHQ_hACwwcH2Q4g0QBAYAUB4E
gAQdBgD-Bg0vDw4EkA49oA4fHw6wDxQfFQ8UYDsBXZNwbQ4EcAQuBB4GAP8LYA4-Hw0PDw1wDh8f
HgwNDHAOHA4PFA4MG1A6ASMv8PDRAuUQHkgEEnCMAQZiBKA_ML4wPx8vDw8ghwEyUA8fkAEEEQDx
AXANXw8NYAQObWAEHgQuBHAGAP8QgA0MDT8fDnALDQseGw5gHxQLDgoOGw5gCi8VGigKEMwCHQ_c
ACpRcH1wBA7EAhMeBgC3HQSQBA4sDaA9DrDJAh9AMwFbAMcCBAMEIDAEMAZRDA0wDQz7A79QDQ5b
DnAPFBsKKzQBJS-w8DEA4eAKOrAKFwqQKhcqcApXCgQA8REAKgBaF0oGKgY6FwoQCiYKJgoGOhAK
LxkKLgouCiAKKQIADwgADh-KhhEdIAAqAgCRMBoGKgYqBhogeQA-JgogeQAbMgk6EAgAMQoXCgoA
MCoXOhAAJVcaBgADEgABIgAf2iQCHw8xAP------------------------------------------
-----1pQbT02fX0=
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA3LTA3IDAyOjQxOjMzIixtb2RpZmllZD0iMjAyNS0w
Ny0yMCAxNjo0Mzo1NiJdXQ==
:: map/
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA3LTA2IDIxOjU3OjAzIixtb2RpZmllZD0iMjAyNS0w
Ny0yMCAxNjo0Mzo1NiIscmV2aXNpb249MTEwN11dbHo0AHIBAAB2AAEA8Ql7e2JtcD11c2VyZGF0
YSgiaTE2IiwxMjgEAF8iMDAxMAQA------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------
-----------------------------------------------------------------_nwEiIpLGhp
ZGRlbj1mYWxzZSxwYW5feD0xMDI1LjU3MTQyOAYAARYAdXk9MTAxNi4VALIzLHRpbGVfaD0xNgoA
EHcKAIB6b29tPTd9fQ==
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA3LTA3IDAyOjQxOjMzIixtb2RpZmllZD0iMjAyNS0w
Ny0yMCAxNjo0Mzo1NiJdXQ==
:: pal/
:: pal/0.pal
b64$LS1bW3BvZCxiZ19jb2xvcj0wLGJsYWNrZXN0X2NvbG9yPTAsY3JlYXRlZD0iMjAyNS0wNy0w
NiAyMjozNTo0OSIsaGlkZGVuPXtbMF09ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2Us
ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2Us
ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2Us
ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2UsZmFsc2V9LGhpZGRlbl90b2dnbGVzPXtbMF09ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2V9LGh1
ZV9vZmZzZXQ9MCxpY29uPXVzZXJkYXRhKCJ1OCIsMTYsMTYsIjAwMDEwMTAxMDEwMTAxMDEwMTAx
MDEwMDAwMDAwMDAwMDAwMTA3MDcwNzA3MDcwNzA3MDcwNjAxMDAwMDAwMDAwMDAxMDcwNzA3MDcw
NzA3MDcwNzA2MDYwMTAwMDAwMDAwMDEwNzA3MDcwNzA3MDcwNzA3MDYwNjA2MDEwMDAwMDAwMTA3
MDcwNzA3MDcwNzA3MDcwNjA2MDYwNjAxMDAwMDAxMDcwNzA3MDcwNzA3MDcwNzA3MDcwNzA3MDEw
MDAwMDEwNzA3MDcwNzA3MDcwNzA3MDcwNzA3MDcwMTAwMDAwMTA3MDcwNjA2MDEwMTBkMGQwMTAx
MDcwNzAxMDAwMDAxMDcwNzA2MDYwMTAxMGQwZDAxMDEwNzA3MDEwMDAwMDEwNzA3MDEwMTA3MDcw
NjA2MGQwZDA3MDcwMTAwMDAwMTA3MDcwMTAxMDcwNzA2MDYwZDBkMDcwNzAxMDAwMDAxMDcwNzBk
MGQwMTAxMGQwZDA2MDYwNzA3MDEwMDAwMDEwNzA3MGQwZDAxMDEwZDBkMDYwNjA3MDcwMTAwMDAw
MTA3MDcwNzA3MDcwNzA3MDcwNzA3MDcwNzAxMDAwMDAxMDcwNzA3MDcwNzA3MDcwNzA3MDcwNzA3
MDEwMDAwMDEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwMTAwIiksbG9ja2VkPXtbMF09dHJ1ZSx0
cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1
ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUs
dHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsZmFsc2Us
ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2Us
ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2V9LG1vZGlmaWVkPSIyMDI1LTA3LTE0IDAyOjU3OjQxIixva3BhbF92ZXJzaW9uPSIxLjIuMiIs
cGlja2Vyc19tb2RlPSJsaW5lYXJfaHVlIixyZXZpc2lvbj04NDEsdGVzdF9jdWJlX2NvbG9ycz17
WzBdPXsxNSwzMSw0fSx7MzEsNCwyMH0sezQsMjAsMjF9LHsxMCw5LDI1fSx7OSwyNSwyNH0sezgs
MjQsMn0sezI2LDExLDI3fSx7MTEsMjcsM30sezI3LDMsMTl9LHsyOCwxNywxOX0sezI4LDEyLDE2
fSx7MTIsMTYsMX0sezYsMjksMTN9LHsyOSwxMywxOH0sezEzLDE4LDF9LHs3LDIzLDE0fSx7MjMs
MTQsMTN9LHsxNCwzMCwxOH0sezcsNiwyMn0sezYsMjIsNX0sezIyLDUsMjF9LHsxLDEsMX0sezEs
MSwxfSx7MSwxLDF9fSx0ZXN0X21vZGU9ImN1YmVzIix0ZXN0X3JhbXBfY29sb3JzPXVzZXJkYXRh
KCJ1OCIsMTAsMjcsIjAwMTgwODE5MDkwYTFhMGIxYjAwMDYwMDAwMDAwMDAwMDAwMDAzMDAxNjAw
MDAwMDAwMDAwMDAwMTMwMDA1MDAwMDAwMDAwMDAwMDAwMTAwMGQwMDAwMDAwMDAwMDAwMDEwMDAx
ZDAwMDAwMDAwMDAwMDAwMTEwMDE3MDAwMDAwMDAwMDAwMDAwYzAwMGUwMDAwMDAwMDAwMDAwMDFj
MDAxZTEyMDIxNTE0MDQxZjBmMDcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxNDA0MWYwZjA4MTgw
MjAwMDAxNTA1MTYwNjA3MTcwZTFlMDAwMDAxMTAxMTBjMWMxZDBkMTIwMDAwMTMwMzFiMGIxYTBh
MDkxOTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw
MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw
MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw
MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw
MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCIpLHdoaXRlc3RfY29sb3I9
N11dbHo0ABYBAAAVAgAA9QV1c2VyZGF0YSgiaTMyIiw2NCwiMAEAwDFkMmI1MzAwN2UyNQgA8Bcw
MDg3NTEwMGFiNTIzNjAwNWY1NzRmMDBjMmMzYzcwMGZmZjFlOAgAQDAwNGQIABFhNgBgZmZlYzI3
CgAgZTQ4AEAyOWFkJABgODM3NjljIAAxNzdhOACwY2NhYTAwMjQ2M2IvAPAeMGE1YTEwMDY1NDY4
ODAwMTI1MzU5MDA3NDJmMjkwMDQ1MmQzMjAwYTI4ODc5QADwDWFjYzUwMGI5MDAzZTAwZTI2YjAy
MDA5NWYwNDJQACBiMsAAoDY0ZGZmNjAwYmSJAACWAEAwZGFiQAAwODU1qAARZAIAAJAATzI5ODAB
ANlQMDAwIik=
:: pal/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA3LTA2IDIyOjM1OjQ5Iixtb2RpZmllZD0iMjAyNS0w
Ny0yMCAxNjo0Mzo1NiJdXQ==
:: sfx/
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA3LTA2IDIxOjU3OjAzIixtb2RpZmllZD0iMjAyNS0w
Ny0yMCAxNjo0Mzo1NiIscmV2aXNpb249MTA4OF1dbHo0APYAAABxCgAA-zBweHUAAygAAAQABA9A
EAIOAAGgASACoA4ADxAADfDKAQIDQA8PkAQFBgdADJAICQoLQAyQDwwPDQ8ODEAM8P8BAOv-J6oB
EAYPIBABIAEgAfAAAhACDhABIA8hIAEwD0Dwww8oD--wxg-4Cg--D4AP9w8NAfAJARAGDjAA----
--_9H-8BAKzxLMgPQAAPEEAPNw86DzsPPQ8-Dz0PQQ9CD0MfRA9ADzUPLQ8lDyIODx8PHh8dDx4O
DyIPJw8uDzEPNA85MgDyCToPNw8wHyf--wxPFgD9Dv--DP4U8wzwcFcAL-OwCgACH-8BAP-mUP--
--9N
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA3LTA3IDAyOjQxOjMzIixtb2RpZmllZD0iMjAyNS0w
Ny0yMCAxNjo0Mzo1NiJdXQ==
:: bullets.lua
--[[pod_format="raw",created="2025-07-12 05:07:27",modified="2025-07-20 16:43:56",revision=438]]
function init_bullets()
	bullets = {}
	return bullets
end

function create_bullet(x,y,angle,speed,size)
	local b = {}
	b.x=x
	b.y=y
	b.angle=angle
	b.speed=speed
	b.size=size
	add(bullets,b)
end

function update_bullets()
	
	foreach(bullets, function (bullet)
		foreach(enemies, function (enemy)
			if check_collision(bullet.x,bullet.y,bullet.size,bullet.size,enemy.x,enemy.y,enemy.sizex,enemy.sizey) then
				enemy.health -= player.damage
				del(bullets, bullet)
				return
			end
		end)
		bullet.x += bullet.speed*cos(bullet.angle)
		bullet.y -= bullet.speed*sin(bullet.angle)
		if abs(player.x-bullet.x)>(240+bullet.size) or abs(player.y-bullet.y)>(135+bullet.size) then
			del(bullets, bullet)
		end
	end)
end

function draw_bullets()
	foreach(bullets, function(bullet)
		circfill(bullet.x,bullet.y,bullet.size,10)
	end)
end
:: enemies.lua
--[[pod_format="raw",created="2025-07-12 05:07:16",modified="2025-07-20 16:43:56",revision=433]]
function init_enemies()
	enemies = {}
	etypes = {
		hunter = {
			health = 2,
			sizex = 16,
			sizey = 16,
			speed = 0.5,
			sprites = {
				left = {48, 	49, 50},
				right = {56,57, 58},
				front = {32, 33, 34},
				back = {40, 41, 42}
	}}}
	create_enemy(player.x+50, player.y+50,etypes.hunter)
	return enemies
end

function create_enemy(x,y, etype)
	local e = {}
	e.x=x
	e.y=y
	e.angle=atan2(x-player.x, y-player.y)+0.5
	e.health=etype.health
	if e.angle > 1 then
		e.angle -= 1
	end
	e.speed=etype.speed
	e.sprites=etype.sprites
	e.sizex=etype.sizex
	e.sizey=etype.sizey
	add(enemies,e)
end

function update_enemies()
	foreach(enemies, function (enemy)
		if enemy.health <= 0 then
			create_expgem(enemy.x,enemy.y)
			del(enemies, enemy)
			return
		end
		enemy.angle=atan2(enemy.x-player.x, enemy.y-player.y)+0.5
		enemy.x += enemy.speed*cos(enemy.angle)
		enemy.y += enemy.speed*sin(enemy.angle)
	end)
end

function draw_enemies()
	foreach(enemies, function(enemy)
		local sprites = {}
		if enemy.angle > 0.125 and enemy.angle <= 0.375 then
			sprites = enemy.sprites.back
		elseif enemy.angle > 0.3 and enemy.angle <= 0.625 then
			sprites = enemy.sprites.left
		elseif enemy.angle > 0.625 and enemy.angle <= 0.875 then
			sprites = enemy.sprites.front
		else
			sprites = enemy.sprites.right
		end
		spr(get_frame(frame,sprites, 10), enemy.x, enemy.y)
	end)
end
:: expgems.lua
--[[pod_format="raw",created="2025-07-12 05:14:16",modified="2025-07-20 16:43:56",revision=440]]
function init_expgems()
	expgems = {}
	return expgems
end

function create_expgem(x,y)
	local g = {}
	g.x = x
	g.y = y
	add(expgems, g)
end

function update_expgems()
	foreach(expgems, function (gem)
		if check_collision(player.x, player.y, player.sizex, player.sizey,gem.x,gem.y,16,16) then
			player.exp += 10
			del(expgems, gem)
		end
	end)
end

function draw_expgems()
	foreach(expgems, function (gem)
		spr(24, gem.x, gem.y)
	end)
end
:: main.lua
--[[pod_format="raw",created="2025-07-06 21:57:03",modified="2025-07-20 16:43:56",revision=1455]]
include("utils.lua")
include("enemies.lua")
include("bullets.lua")
include("player.lua")
include("expgems.lua")

function _init()
	gamestates = {"title","level", "play", "death"}
	init_player()
	init_bullets()
	init_enemies()
	init_expgems()
	animations = {
		gunfire = {
			sprites = {}
		}
	}
	frame = 0
	mouse_enabled = true
	vid()
	fetch("pal/0.pal"):poke(0x5000)
end

function _update()
	update_player()
	update_bullets()
	update_enemies()
	update_expgems()
	-- frame	
	frame += 1
end

function _draw()
	printh(player.x..", "..player.y)
	cls()
	map(1)
	draw_bullets()
	draw_enemies()
	draw_expgems()
	
	draw_hud()
	-- this needs to be last because of interactions with tline3d
	draw_player()
end

function draw_hud()
	rectfill(camx,camy, camx+480, camy+28, 19)
	rectfill(camx,camy,camx+480*(player.hp/player.maxhp), camy+14, 8)
	rectfill(camx,camy+15,camx+480*(player.exp/100), camy+28, 16)
	print("HP: "..player.hp.."/"..player.maxhp, camx+4,camy+4, 7)
	print("Exp: "..player.exp, camx+4, camy+18, 7)
end


:: player.lua
--[[pod_format="raw",created="2025-07-12 05:07:42",modified="2025-07-20 16:43:56",revision=499]]
function init_player()
	player = {
		sizex = 16,
		sizey = 16,
		x=16*64,
		y=16*64,
		angle=0,
		speed=2,
		sprites={2,3},
		damage=1,
		ammo=6,
		max_ammo=6,
		reload = {
			reloading = 0,
			max_time = 90,
			window_size = 0.2,
			pressed = false
		},
		firerate=10, --in terms of frames between shots
		fire_cooldown=0,
		exp=0,
		hp=100,
		maxhp=100
	}
	upgrades = {
		ammo_up = {
			sprite = 12,
			upgrade = function ()
				player.ammo += 3
			end,
		},
	}
	return player
end

function update_player()
	-- movement
	if player.x > 0 and btn(0) or key("a") then
		player.x -= 1*player.speed
	end
	if player.x < 126*16 and btn(1) or key("d") then
		player.x += 1*player.speed
	end
	if player.y > 0 and btn(2) or key("w") then
		player.y -= 1*player.speed
	end
	if player.y < 127*16 and btn(3) or key("s") then
		player.y += 1*player.speed
	end
	
	-- cam
	local maxcamx,maxcamy=127*16-480,128*16-270
	local mincamx,mincamy=0,-29
	camx,camy = player.x-240, player.y-135
	if player.x > maxcamx+240 then
		camx = maxcamx
	end
	if player.x < mincamx+240 then
		camx = mincamx
	end
	if player.y > maxcamy+135 then
		camy = maxcamy
	end
	if player.y < mincamy+135 then
		camy = mincamy
	end
	camera(camx, camy)
	
	-- angle
	local mx,my,mb = mouse()
	local dx,dy
	if mouse_enabled then
		printh("camx: "..camx.." player.x: "..player.x.." mx: "..mx)
		printh("camy: "..camy.." player.y: "..player.y.." my: "..my)
		dx,dy = abs(camx-player.x)-mx, abs(camy-player.y)-my
	else
		dx = (btn(8) or 0) - (btn(9) or 0)
		dy = (btn(10) or 0) - (btn(11) or 0)
	end
	
	player.angle = atan2(-dx,dy)
	printh("angley: "..player.angle)	
	--shooting
	if player.reload.reloading == 0 then
		if btn(4) or mb==1 or key("q")   then
			if player.ammo <= 0 and player.reload.reloading == 0 then
				player.reload.reloading = 1
			elseif player.fire_cooldown > 0 then
				player.fire_cooldown -= 1
			else
				create_bullet(player.x+8+20*cos(player.angle), player.y+8+20*sin(-player.angle),player.angle, 1, 3)
				player.fire_cooldown = player.firerate
				player.ammo-=1
			end
		end
	else
		player.reload.reloading += 1
		if player.reload.reloading >= player.reload.max_time then
			player.ammo = player.max_ammo
			player.reload.reloading = 0
			player.reload.pressed = false
		elseif not player.reload.pressed then
			local subdivision = player.reload.window_size*player.reload.max_time
			local window_left,window_right = subdivision*3,subdivision*4
			if btnp(5) or key("r") then
				if player.reload.reloading >= window_left and player.reload.reloading <= window_right then
					player.reload.reloading = 0
					player.reload.pressed = false
					player.ammo = player.max_ammo
				else
					player.reload.pressed = true
				end
			end
		end
	end
end

function draw_player()
	-- player
	spr(get_frame(frame, player.sprites, 8), player.x, player.y)
	-- reload
	if player.reload.reloading > 0 then
		draw_active_reload()
	end
	-- gun
	local flipgun = 1
	if player.angle < -0.25 or player.angle > 0.25 then flipgun = -1 else flipgun = 1 end 
	rspr(8, player.x+8+10*cos(player.angle), player.y+8+10*sin(-player.angle),1,flipgun,player.angle)
	if mouse_enabled then
		local camx,camy = camera()
		local mouse_x, mouse_y = mouse()
		spr(9, camx+mouse_x, camy+mouse_y)
	end
end

function draw_active_reload()
	local active = 15*player.reload.window_size*3
	rectfill(player.x, player.y-8,player.x+15,player.y-4, 8)
	if not player.reload.pressed then
		rectfill(player.x+active,player.y-8, player.x+active+15*0.2,player.y-4, 3)
	end
	local currentx = player.x+(15*player.reload.reloading/player.reload.max_time)
	line(currentx, player.y-8,currentx, player.y-4, 7)
end
:: utils.lua
--[[pod_format="raw",created="2025-07-07 02:19:42",modified="2025-07-20 16:43:56",revision=772]]
function get_frame(sframe, sprites, speed)
	return sprites[flr(sframe / speed) % #sprites + 1]
end

 	

function rspr(sprite,cx,cy,sx,sy,rot)
	sx = sx and sx or 1
	sy = sy and sy or 1
	rot = rot and rot or 0
	local tex = get_spr(sprite)
	local dx,dy = tex:width()*sx,tex:height()*sy
	local quad = {
		{x=0, y=0, u=0, v=0},
		{x=dx, y=0, u=tex:width()-0.001, v=0},
		{x=dx, y=dy, u=tex:width()-0.001, v=tex:height()-0.001},
		{x=0, y=dy, u=0, v=tex:height()-0.001},
	}
	local c,s = cos(rot),-sin(rot)
	local w,h = (dx-1)/2, (dy-1)/2
	for _,v in pairs(quad) do
		local x,y = v.x-w,v.y-h
		v.x = c*x-s*y
		v.y = s*x+c*y	
	end
	tquad(quad, tex, cx, cy)
end

 	

function tquad(coords, tex, dx, dy)
    -- Get current camera offsets
    local cam_x, cam_y = camera()

    -- Initialize variables
    local p0, spans = coords[#coords], {}
    local x0, y0, u0, v0 = p0.x + dx - cam_x, p0.y + dy - cam_y, p0.u, p0.v

    for i = 1, #coords do
        local p1 = coords[i]
        local x1, y1, u1, v1 = p1.x + dx - cam_x, p1.y + dy - cam_y, p1.u, p1.v
        local _x1, _y1, _u1, _v1 = x1, y1, u1, v1

        -- Swap if y0 > y1 to ensure correct scanline order
        if y0 > y1 then
            x0, y0, x1, y1, u0, v0, u1, v1 = x1, y1, x0, y0, u1, v1, u0, v0
        end

        local dy = y1 - y0
        local dx, du, dv = dy ~= 0 and (x1 - x0) / dy or 0, dy ~= 0 and (u1 - u0) / dy or 0, dy ~= 0 and (v1 - v0) / dy or 0

        -- Adjust starting point if y0 is negative
        if y0 < 0 then
            x0 = x0 - y0 * dx
            u0 = u0 - y0 * du
            v0 = v0 - y0 * dv
            y0 = 0
        end

        local cy0 = ceil(y0)
        local sy = cy0 - y0
        x0 = x0 + sy * dx
        u0 = u0 + sy * du
        v0 = v0 + sy * dv

        -- Draw scanlines
        for y = cy0, ceil(y1) - 1 do
            local span = spans[y]
            if span then
                tline3d(tex, span.x, y, x0, y, span.u, span.v, u0, v0, 1, 1, 0x100)
            else
                spans[y] = { x = x0, u = u0, v = v0 }
            end
            x0 = x0 + dx
            u0 = u0 + du
            v0 = v0 + dv
        end

        x0, y0, u0, v0 = _x1, _y1, _u1, _v1
    end
end

function deepcopy(orig)
    local orig_type = type(orig)
    local copy
    if orig_type == 'table' then
        copy = {}
        for orig_key, orig_value in next, orig, nil do
            copy[deepcopy(orig_key)] = deepcopy(orig_value)
        end
        setmetatable(copy, deepcopy(getmetatable(orig)))
    else -- number, string, boolean, etc
        copy = orig
    end
    return copy
end

function check_collision(x1,y1,w1,h1, x2,y2,w2,h2)
  return x1 < x2+w2 and
         x2 < x1+w1 and
         y1 < y2+h2 and
         y2 < y1+h1
end
:: .info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA3LTA2IDIyOjQ4OjAxIixtb2RpZmllZD0iMjAyNS0w
Ny0yMCAxNjo0Mzo1NiIscnVudGltZT0xOCx3b3Jrc3BhY2VzPXt7bG9jYXRpb249Im1haW4ubHVh
IzEiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249InV0aWxzLmx1YSMxIix3b3Jrc3BhY2Vf
aW5kZXg9MX0se2xvY2F0aW9uPSJidWxsZXRzLmx1YSMxIix3b3Jrc3BhY2VfaW5kZXg9MX0se2xv
Y2F0aW9uPSJlbmVtaWVzLmx1YSMxIix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJwbGF5
ZXIubHVhIzc1Iix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJleHBnZW1zLmx1YSMxIix3
b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJnZngvMC5nZngiLHdvcmtzcGFjZV9pbmRleD0y
fSx7bG9jYXRpb249Im1hcC8wLm1hcCIsd29ya3NwYWNlX2luZGV4PTN9LHtsb2NhdGlvbj0ic2Z4
LzAuc2Z4Iix3b3Jrc3BhY2VfaW5kZXg9NH19XV0=
:: [eoc]
