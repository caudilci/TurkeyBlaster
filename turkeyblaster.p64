picotron cartridge // www.picotron.net
version 2

:: gfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA3LTA2IDIxOjU3OjAzIixtb2RpZmllZD0iMjAyNS0w
Ny0xMCAxODowMDozOCIscmV2aXNpb249NzA4XV1sejQA2AQAAM83AADzIXtbMF09e2JtcD1weHUA
QyAQEATwVgcQB8AX0BfABxAH8FYsZmxhZ3M9MCxwYW5feAgAynk9MCx6b29tPTl9LD4A8EQgKAAo
cAkPHQ8gDx0IkAkPGS8dDSAfFFAPGB8dDTAELxQwCA8dHRAfFBQuEA8YCC0APhQuAAg9XgQuAB0O
HQ4kLgQOEA4NDg0ORC4EDgBOJB4EHggA-w4ULgQuIE4ELgQOUE40kAkQCbAJEAmQGQ8ZEAwZMKMA
HKJgCAAIACiQCAAIpwDxLQlQHxQgDS8dDxkJIC8UBDANHx0PGCAvFBQeEB0PHQgQLhQ_AC0IDxgA
LgRePQgQDgQuJA4dDh0ADgQuRKsA8gkADgQeBB4kThAuBC4UTjAOBC4ETlA0ToCnAH8PGRlwGQxw
pQAdXxgQKKAYoQBPAUQBXwngDBkgoQAcL-DwMQCw-wFodYAPIAVOcA4FDsAFDvBGQAAd4zY3wBeg
B1AHcBcAFwAXBgCfB1AHoBfAN-A2TgAd-wdFFxAXkAcwB7AX0BewBzAHkBcQF-BFRgAdoUcX8AwH
ABcAB5AGAF-wDBfwR3oBHg8xAK--Bv8bDRyuDxoODAoMvg0czh3_AA3_knUAHg8xAP--zcIGPxmQ
LgkOCR5gDgkCAEIeUA4ECwD-RwQOUA8hDlQODUAdDw9eDB0wDSwPIBwLLA1ADXwNQAQODVwNDgQg
BC5dLgQADQwOFF4EDgwNAA0MDRReBBwNAB0QBC8fBBoOHVAEKgQaDxRwCC8VBBdAogAcH1ChABEg
UA2hACgNQKEA8QRgDVwNUAQeXR4EIAS_BBANDA4EoQBAEA0cBKAANyAdDp8AvwRwDxQvFQQYDxQw
QwFkAqIAERRDAf8OHAReFA0MDRAdDh8fBCoEEB0wDxQaBCoEgB8VBCijACAf8NsC9REeCADxCy5Q
Hx9eHVCdQA8hDw99DA8hQAt9C0AEDnsOLAIjAAvNAlALAAsMC80CsAsAGxAELQQdDhtQBwBADxRw
Ci0CD8wCMQ_SAAhSYHtQBJ6_AhMLvgIxCxALvgJGCyAbDpAAA70CHhq9Ag8lAUcjEAuvAiALAJMA
8AEUCwwLEBsOHQQtBBAbMA8UCQAArgIfKq4C-x8hcB5-ATIOQD4IAFAJDjC_UIQBZQ8gLw8-HwsA
AQgAICEPEQDxBl8PDyFgBH1QBA4ETgQOBEANDw8EXgkAgA5fHw4PDw1QCAD-AQ1gDiwPFBwLYAsv
FRsqCzC9Ah0PoQAsMHB9kMkNEAQGAFAeBIAEHQYA-wYNLw8OBJAOPaAOHx8OsA8UHxUPFGA7AV2T
cG0OBHAELgQeBgD-C2AOPx8NDw8NcA4fHx4MDQxwDhwODxQODBtQOgEjL-Dw0QLlEB5IBBJwjAEG
YgSgPjC_MD8fLw8PIIcBMlAPH5ABBBEA8QFwDV8PDWAEDm1gBB4ELgRwBgD-EIANDA0-Hw5wCw0L
HhsOYB8UCw4KDhsOYAovFRooChDMAh0PnAAqUXB9cAQOxAITHgYAtx0EkAQOLA2gPQ6wyQIfQDMB
WwDHAgQDBCAwBDAGUQwNMA0M_wO-UA0OWw5wDxQbCis0ASUv8PAxAP----------------------
--------------------------_yUG09OX19
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA3LTA3IDAyOjQxOjMzIixtb2RpZmllZD0iMjAyNS0w
Ny0xMCAxODowMDozOCJdXQ==
:: map/
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA3LTA2IDIxOjU3OjAzIixtb2RpZmllZD0iMjAyNS0w
Ny0xMCAxODowMDozOCIscmV2aXNpb249NjUxXV1sejQAYAEAAF0AAQDxCXt7Ym1wPXVzZXJkYXRh
KCJpMTYiLDEyOAQAXyIwMDEwBAD-------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------6fEIIiksaGlk
ZGVuPWZhbHNlLHBhbl94PTAIANJ5PTAsdGlsZV9oPTE2CgAQdwoAsHpvb209MC4yNX19
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA3LTA3IDAyOjQxOjMzIixtb2RpZmllZD0iMjAyNS0w
Ny0xMCAxODowMDozOCJdXQ==
:: pal/
:: pal/0.pal
b64$LS1bW3BvZCxiZ19jb2xvcj0wLGJsYWNrZXN0X2NvbG9yPTAsY3JlYXRlZD0iMjAyNS0wNy0w
NiAyMjozNTo0OSIsaGlkZGVuPXtbMF09ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2Us
ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2Us
ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2Us
ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2UsZmFsc2V9LGhpZGRlbl90b2dnbGVzPXtbMF09ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2V9LGh1
ZV9vZmZzZXQ9MCxpY29uPXVzZXJkYXRhKCJ1OCIsMTYsMTYsIjAwMDEwMTAxMDEwMTAxMDEwMTAx
MDEwMDAwMDAwMDAwMDAwMTA3MDcwNzA3MDcwNzA3MDcwNjAxMDAwMDAwMDAwMDAxMDcwNzA3MDcw
NzA3MDcwNzA2MDYwMTAwMDAwMDAwMDEwNzA3MDcwNzA3MDcwNzA3MDYwNjA2MDEwMDAwMDAwMTA3
MDcwNzA3MDcwNzA3MDcwNjA2MDYwNjAxMDAwMDAxMDcwNzA3MDcwNzA3MDcwNzA3MDcwNzA3MDEw
MDAwMDEwNzA3MDcwNzA3MDcwNzA3MDcwNzA3MDcwMTAwMDAwMTA3MDcwNjA2MDEwMTBkMGQwMTAx
MDcwNzAxMDAwMDAxMDcwNzA2MDYwMTAxMGQwZDAxMDEwNzA3MDEwMDAwMDEwNzA3MDEwMTA3MDcw
NjA2MGQwZDA3MDcwMTAwMDAwMTA3MDcwMTAxMDcwNzA2MDYwZDBkMDcwNzAxMDAwMDAxMDcwNzBk
MGQwMTAxMGQwZDA2MDYwNzA3MDEwMDAwMDEwNzA3MGQwZDAxMDEwZDBkMDYwNjA3MDcwMTAwMDAw
MTA3MDcwNzA3MDcwNzA3MDcwNzA3MDcwNzAxMDAwMDAxMDcwNzA3MDcwNzA3MDcwNzA3MDcwNzA3
MDEwMDAwMDEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwMTAwIiksbG9ja2VkPXtbMF09dHJ1ZSx0
cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1
ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUs
dHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsZmFsc2Us
ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2Us
ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFs
c2V9LG1vZGlmaWVkPSIyMDI1LTA3LTEwIDAyOjIwOjI0Iixva3BhbF92ZXJzaW9uPSIxLjIuMiIs
cGlja2Vyc19tb2RlPSJsaW5lYXJfaHVlIixyZXZpc2lvbj00NzYsdGVzdF9jdWJlX2NvbG9ycz17
WzBdPXsxNSwzMSw0fSx7MzEsNCwyMH0sezQsMjAsMjF9LHsxMCw5LDI1fSx7OSwyNSwyNH0sezgs
MjQsMn0sezI2LDExLDI3fSx7MTEsMjcsM30sezI3LDMsMTl9LHsyOCwxNywxOX0sezI4LDEyLDE2
fSx7MTIsMTYsMX0sezYsMjksMTN9LHsyOSwxMywxOH0sezEzLDE4LDF9LHs3LDIzLDE0fSx7MjMs
MTQsMTN9LHsxNCwzMCwxOH0sezcsNiwyMn0sezYsMjIsNX0sezIyLDUsMjF9LHsxLDEsMX0sezEs
MSwxfSx7MSwxLDF9fSx0ZXN0X21vZGU9ImN1YmVzIix0ZXN0X3JhbXBfY29sb3JzPXVzZXJkYXRh
KCJ1OCIsMTAsMjcsIjAwMTgwODE5MDkwYTFhMGIxYjAwMDYwMDAwMDAwMDAwMDAwMDAzMDAxNjAw
MDAwMDAwMDAwMDAwMTMwMDA1MDAwMDAwMDAwMDAwMDAwMTAwMGQwMDAwMDAwMDAwMDAwMDEwMDAx
ZDAwMDAwMDAwMDAwMDAwMTEwMDE3MDAwMDAwMDAwMDAwMDAwYzAwMGUwMDAwMDAwMDAwMDAwMDFj
MDAxZTEyMDIxNTE0MDQxZjBmMDcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxNDA0MWYwZjA4MTgw
MjAwMDAxNTA1MTYwNjA3MTcwZTFlMDAwMDAxMTAxMTBjMWMxZDBkMTIwMDAwMTMwMzFiMGIxYTBh
MDkxOTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw
MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw
MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw
MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw
MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCIpLHdoaXRlc3RfY29sb3I9
N11dbHo0ABYBAAAVAgAA9QV1c2VyZGF0YSgiaTMyIiw2NCwiMAEAwDFkMmI1MzAwN2UyNQgA8Bcw
MDg3NTEwMGFiNTIzNjAwNWY1NzRmMDBjMmMzYzcwMGZmZjFlOAgAQDAwNGQIABFhNgBgZmZlYzI3
CgAgZTQ4AEAyOWFkJABgODM3NjljIAAxNzdhOACwY2NhYTAwMjQ2M2IvAPAeMGE1YTEwMDY1NDY4
ODAwMTI1MzU5MDA3NDJmMjkwMDQ1MmQzMjAwYTI4ODc5QADwDWFjYzUwMGI5MDAzZTAwZTI2YjAy
MDA5NWYwNDJQACBiMsAAoDY0ZGZmNjAwYmSJAACWAEAwZGFiQAAwODU1qAARZAIAAJAATzI5ODAB
ANlQMDAwIik=
:: pal/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA3LTA2IDIyOjM1OjQ5Iixtb2RpZmllZD0iMjAyNS0w
Ny0xMCAxODowMDozOCJdXQ==
:: sfx/
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA3LTA2IDIxOjU3OjAzIixtb2RpZmllZD0iMjAyNS0w
Ny0xMCAxODowMDozOCIscmV2aXNpb249NjQwXV1sejQApQAAACgKAAD-MHB4dQADKAAABAAED0AQ
Ag4AAaABIAKgDgAPEAAN8MoBAgNADw_QBAUGB0AMkAgJCgtADJAPDA8NDw4MQAzw-wEA6-8nqgEQ
Bg8gEAEgASAB8AACEAIOEAEgDyEgATAPQPDDDygP--DGD-gKD-8PgA-3Dw0B8AkBEAYOMAD-----
-70f-wEArM-ID0AADxBA--_w8HALAA0f-wEA-_ZQ-----00=
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA3LTA3IDAyOjQxOjMzIixtb2RpZmllZD0iMjAyNS0w
Ny0xMCAxODowMDozOCJdXQ==
:: main.lua
--[[pod_format="raw",created="2025-07-06 21:57:03",modified="2025-07-10 18:00:38",revision=882]]
include("utils.lua")

function _init()
	gamestates = {"title","level", "play", "death"}
	player = {
		x=16*64,
		y=16*64,
		angle=0,
		speed=2,
		sprites={2,3}
	}
	bullets = {}
	enemies = {}
	etypes = {
		hunter = {
			sprites = {
				left = {48, 	49, 50},
				right = {56,57, 58},
				front = {32, 33, 34},
				back = {40, 41, 42}
	}}}
	create_enemy(player.x+50, player.y+50,1,etypes.hunter)
	frame = 0
	mouse_enabled = true
	vid()
	fetch("pal/0.pal"):poke(0x5000)
	poke(0x5f58, 0x1 | 0x2 | 0x4 | 0x8)
end

function _update()
	-- movement
	if btn(0) or key("a") then
		player.x -= 1*player.speed
	end
	if btn(1) or key("d") then
		player.x += 1*player.speed
	end
	if btn(2) or key("w") then
		player.y -= 1*player.speed
	end
	if btn(3) or key("s") then
		player.y += 1*player.speed
	end
	local mouse_b = mouse()
	
	-- cam
	camera(player.x-240, player.y-135)
	
	-- angle
	local dx,dy
	if mouse_enabled then
		local mouse_x,mouse_y = mouse()
		dx = 240-mouse_x
		dy = 135-mouse_y
	else
		dx = (btn(8) or 0) - (btn(9) or 0)
		dy = (btn(10) or 0) - (btn(11) or 0)
	end
	
	player.angle = atan2(-dx,dy)
	
	-- bullets
	if btnp(4) or mouse_b == 0x1 or key("q")  then
		create_bullet(player.x+8+20*cos(player.angle), player.y+8+20*sin(-player.angle),player.angle, 1, 3)
	end
	update_bullets()
	update_enemies()
	
	-- frame	
	frame += 1
end

function _draw()
	cls()
	map(1)
	-- player
	spr(get_frame(frame, player.sprites, 8), player.x, player.y)
	-- bullets
	draw_bullets()
	-- enemies
	print(enemies[1].angle)
	draw_enemies()
	-- gun
	rspr(8, player.x+8+10*cos(player.angle), player.y+8+10*sin(-player.angle),1,1,player.angle)
	if mouse_enabled then
		local camx,camy = camera()
		local mouse_x, mouse_y = mouse()
		spr(9, camx+mouse_x, camy+mouse_y)
	end
end

function create_bullet(x,y,angle,speed,size)
	local b = {}
	b.x=x
	b.y=y
	b.angle=angle
	b.speed=speed
	b.size=size
	add(bullets,b)
end

function update_bullets()
	foreach(bullets, function (bullet)
		bullet.x += bullet.speed*cos(bullet.angle)
		bullet.y -= bullet.speed*sin(bullet.angle)
		if abs(player.x-bullet.x)>(240+bullet.size) or abs(player.y-bullet.y)>(135+bullet.size) then
			del(bullets, bullet)
		end
	end)
end

function draw_bullets()
	foreach(bullets, function(bullet)
		circfill(bullet.x,bullet.y,bullet.size,10)
	end)
end

function create_enemy(x,y, speed, etype)
	local e = {}
	e.x=x
	e.y=y
	e.angle=atan2(x-player.x, y-player.y)+0.5
	if e.angle > 1 then
		e.angle -= 1
	end
	e.speed=speed
	e.sprites=etype.sprites
	add(enemies,e)
end

function update_enemies()
	foreach(enemies, function (enemy)
		enemy.angle=atan2(enemy.x-player.x, enemy.y-player.y)+0.5
		enemy.x += enemy.speed*cos(enemy.angle)
		enemy.y += enemy.speed*sin(enemy.angle)
	end)
end

function draw_enemies()
	foreach(enemies, function(enemy)
		local sprites = {}
		if enemy.angle > 0.125 and enemy.angle <= 0.375 then
			printh("back:"..enemy.angle)
			sprites = enemy.sprites.back
		elseif enemy.angle > 0.3 and enemy.angle <= 0.625 then
			printh("left:"..enemy.angle)
			sprites = enemy.sprites.left
		elseif enemy.angle > 0.625 and enemy.angle <= 0.875 then
			printh("front:"..enemy.angle)
			sprites = enemy.sprites.front
		else
			printh("right:"..enemy.angle)
			sprites = enemy.sprites.right
		end
		spr(get_frame(frame,sprites, 10), enemy.x, enemy.y)
	end)
end

:: utils.lua
--[[pod_format="raw",created="2025-07-07 02:19:42",modified="2025-07-10 18:00:38",revision=281]]
function get_frame(sframe, sprites, speed)
	return sprites[flr(sframe / speed) % #sprites + 1]
end

 	

function rspr(sprite,cx,cy,sx,sy,rot)
	sx = sx and sx or 1
	sy = sy and sy or 1
	rot = rot and rot or 0
	local tex = get_spr(sprite)
	local dx,dy = tex:width()*sx,tex:height()*sy
	local quad = {
		{x=0, y=0, u=0, v=0},
		{x=dx, y=0, u=tex:width()-0.001, v=0},
		{x=dx, y=dy, u=tex:width()-0.001, v=tex:height()-0.001},
		{x=0, y=dy, u=0, v=tex:height()-0.001},
	}
	local c,s = cos(rot),-sin(rot)
	local w,h = (dx-1)/2, (dy-1)/2
	for _,v in pairs(quad) do
		local x,y = v.x-w,v.y-h
		v.x = c*x-s*y
		v.y = s*x+c*y	
	end
	tquad(quad, tex, cx, cy)
end

 	

function tquad(coords, tex, dx, dy)
    -- Get current camera offsets
    local cam_x, cam_y = camera()

    -- Initialize variables
    local p0, spans = coords[#coords], {}
    local x0, y0, u0, v0 = p0.x + dx - cam_x, p0.y + dy - cam_y, p0.u, p0.v

    for i = 1, #coords do
        local p1 = coords[i]
        local x1, y1, u1, v1 = p1.x + dx - cam_x, p1.y + dy - cam_y, p1.u, p1.v
        local _x1, _y1, _u1, _v1 = x1, y1, u1, v1

        -- Swap if y0 > y1 to ensure correct scanline order
        if y0 > y1 then
            x0, y0, x1, y1, u0, v0, u1, v1 = x1, y1, x0, y0, u1, v1, u0, v0
        end

        local dy = y1 - y0
        local dx, du, dv = dy ~= 0 and (x1 - x0) / dy or 0, dy ~= 0 and (u1 - u0) / dy or 0, dy ~= 0 and (v1 - v0) / dy or 0

        -- Adjust starting point if y0 is negative
        if y0 < 0 then
            x0 = x0 - y0 * dx
            u0 = u0 - y0 * du
            v0 = v0 - y0 * dv
            y0 = 0
        end

        local cy0 = ceil(y0)
        local sy = cy0 - y0
        x0 = x0 + sy * dx
        u0 = u0 + sy * du
        v0 = v0 + sy * dv

        -- Draw scanlines
        for y = cy0, ceil(y1) - 1 do
            local span = spans[y]
            if span then
                tline3d(tex, span.x, y, x0, y, span.u, span.v, u0, v0, 1, 1, 0x100)
            else
                spans[y] = { x = x0, u = u0, v = v0 }
            end
            x0 = x0 + dx
            u0 = u0 + du
            v0 = v0 + dv
        end

        x0, y0, u0, v0 = _x1, _y1, _u1, _v1
    end
end

function deepcopy(orig)
    local orig_type = type(orig)
    local copy
    if orig_type == 'table' then
        copy = {}
        for orig_key, orig_value in next, orig, nil do
            copy[deepcopy(orig_key)] = deepcopy(orig_value)
        end
        setmetatable(copy, deepcopy(getmetatable(orig)))
    else -- number, string, boolean, etc
        copy = orig
    end
    return copy
end

:: .info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA3LTA2IDIyOjQ4OjAxIixtb2RpZmllZD0iMjAyNS0w
Ny0xMCAxODowMDozOCIscnVudGltZT0xOCx3b3Jrc3BhY2VzPXt7bG9jYXRpb249Im1haW4ubHVh
IzE0OCIsd29ya3NwYWNlX2luZGV4PTF9LHtsb2NhdGlvbj0idXRpbHMubHVhIzEiLHdvcmtzcGFj
ZV9pbmRleD0xfSx7bG9jYXRpb249ImdmeC8wLmdmeCIsd29ya3NwYWNlX2luZGV4PTJ9LHtsb2Nh
dGlvbj0ibWFwLzAubWFwIix3b3Jrc3BhY2VfaW5kZXg9M30se2xvY2F0aW9uPSJzZngvMC5zZngi
LHdvcmtzcGFjZV9pbmRleD00fX1dXQ==
:: [eoc]
